%% Simulink Model Builder for IGBT Loss and Reliability Analysis
% This script creates a complete Simulink model for IGBT loss modeling
% Based on Semikron and Infineon documentation

function create_IGBT_loss_model()

%% Create new model
model_name = 'IGBT_Loss_Reliability_Model';
close_system(model_name, 0);
new_system(model_name);
open_system(model_name);

%% Define positions helper function
pos = @(x, y, w, h) [x, y, x+w, y+h];

%% 1. Create Main Subsystems
y_offset = 50;
subsystem_width = 150;
subsystem_height = 80;
x_start = 100;

% Power Stage Subsystem
add_block('built-in/Subsystem', [model_name '/Power_Stage'], ...
    'Position', pos(x_start, y_offset, subsystem_width, subsystem_height));

% Loss Calculation Subsystem
add_block('built-in/Subsystem', [model_name '/Loss_Calculation'], ...
    'Position', pos(x_start + 250, y_offset, subsystem_width, subsystem_height));

% Thermal Model Subsystem
add_block('built-in/Subsystem', [model_name '/Thermal_Model'], ...
    'Position', pos(x_start + 500, y_offset, subsystem_width, subsystem_height));

% Degradation Model Subsystem
add_block('built-in/Subsystem', [model_name '/Degradation_Model'], ...
    'Position', pos(x_start + 750, y_offset, subsystem_width, subsystem_height));

% Reliability Calculator Subsystem
add_block('built-in/Subsystem', [model_name '/Reliability_Calculator'], ...
    'Position', pos(x_start + 1000, y_offset, subsystem_width, subsystem_height));

%% 2. Build Power Stage Subsystem
build_power_stage([model_name '/Power_Stage']);

%% 3. Build Loss Calculation Subsystem
build_loss_calculation([model_name '/Loss_Calculation']);

%% 4. Build Thermal Model Subsystem
build_thermal_model([model_name '/Thermal_Model']);

%% 5. Build Degradation Model Subsystem
build_degradation_model([model_name '/Degradation_Model']);

%% 6. Build Reliability Calculator Subsystem
build_reliability_calculator([model_name '/Reliability_Calculator']);

%% 7. Connect Subsystems
connect_subsystems(model_name);

%% 8. Add Scopes and Data Logging
add_monitoring(model_name);

%% 9. Configure Model Settings
configure_model_settings(model_name);

%% Save model
save_system(model_name);
fprintf('Simulink model "%s" created successfully!\n', model_name);
fprintf('Open the model using: open_system(''%s'')\n', model_name);

end

%% Build Power Stage Subsystem
function build_power_stage(subsystem_path)
    % Remove default blocks
    delete_block([subsystem_path '/In1']);
    delete_block([subsystem_path '/Out1']);
    
    % Input: DC Voltage
    add_block('simulink/Sources/Constant', [subsystem_path '/V_dc'], ...
        'Value', '400', 'Position', pos(50, 50, 60, 30));
    
    % Input: Load Current (from mission profile)
    add_block('simulink/Sources/From Workspace', [subsystem_path '/I_load'], ...
        'VariableName', 'I_load_profile', ...
        'Position', pos(50, 120, 80, 40));
    
    % Input: Switching Frequency
    add_block('simulink/Sources/Constant', [subsystem_path '/f_sw'], ...
        'Value', '10e3', 'Position', pos(50, 190, 60, 30));
    
    % Modulation Index Calculator
    add_block('simulink/Math Operations/Gain', [subsystem_path '/Mod_Index'], ...
        'Gain', '0.8', 'Position', pos(200, 50, 50, 30));
    
    % Outputs
    add_block('simulink/Sinks/Out1', [subsystem_path '/V_dc_out'], ...
        'Position', pos(350, 50, 40, 30));
    add_block('simulink/Sinks/Out1', [subsystem_path '/I_out'], ...
        'Position', pos(350, 120, 40, 30));
    add_block('simulink/Sinks/Out1', [subsystem_path '/f_sw_out'], ...
        'Position', pos(350, 190, 40, 30));
    
    % Connect blocks
    add_line(subsystem_path, 'V_dc/1', 'Mod_Index/1');
    add_line(subsystem_path, 'Mod_Index/1', 'V_dc_out/1');
    add_line(subsystem_path, 'I_load/1', 'I_out/1');
    add_line(subsystem_path, 'f_sw/1', 'f_sw_out/1');
end

%% Build Loss Calculation Subsystem
function build_loss_calculation(subsystem_path)
    % Remove default blocks
    delete_block([subsystem_path '/In1']);
    delete_block([subsystem_path '/Out1']);
    
    % Inputs
    add_block('simulink/Sources/In1', [subsystem_path '/V_dc'], ...
        'Position', pos(50, 50, 40, 30));
    add_block('simulink/Sources/In1', [subsystem_path '/I_load'], ...
        'Position', pos(50, 120, 40, 30));
    add_block('simulink/Sources/In1', [subsystem_path '/Tj'], ...
        'Position', pos(50, 190, 40, 30));
    add_block('simulink/Sources/In1', [subsystem_path '/f_sw'], ...
        'Position', pos(50, 260, 40, 30));
    
    % IGBT Conduction Loss Calculation
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
        [subsystem_path '/IGBT_Conduction_Loss'], ...
        'Position', pos(200, 50, 100, 60));
    
    % IGBT Switching Loss Calculation
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
        [subsystem_path '/IGBT_Switching_Loss'], ...
        'Position', pos(200, 150, 100, 60));
    
    % Diode Conduction Loss Calculation
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
        [subsystem_path '/Diode_Conduction_Loss'], ...
        'Position', pos(200, 250, 100, 60));
    
    % Diode Switching Loss Calculation
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
        [subsystem_path '/Diode_Switching_Loss'], ...
        'Position', pos(200, 350, 100, 60));
    
    % Sum all losses
    add_block('simulink/Math Operations/Add', [subsystem_path '/Total_Loss'], ...
        'Inputs', '+++++', 'Position', pos(400, 200, 40, 100));
    
    % Outputs
    add_block('simulink/Sinks/Out1', [subsystem_path '/P_total'], ...
        'Position', pos(500, 235, 40, 30));
    add_block('simulink/Sinks/Out1', [subsystem_path '/P_cond_IGBT'], ...
        'Position', pos(350, 65, 40, 30));
    add_block('simulink/Sinks/Out1', [subsystem_path '/P_sw_IGBT'], ...
        'Position', pos(350, 165, 40, 30));
    
    % Connect blocks
    add_line(subsystem_path, 'IGBT_Conduction_Loss/1', 'Total_Loss/1');
    add_line(subsystem_path, 'IGBT_Switching_Loss/1', 'Total_Loss/2');
    add_line(subsystem_path, 'Diode_Conduction_Loss/1', 'Total_Loss/3');
    add_line(subsystem_path, 'Diode_Switching_Loss/1', 'Total_Loss/4');
    add_line(subsystem_path, 'Total_Loss/1', 'P_total/1');
    add_line(subsystem_path, 'IGBT_Conduction_Loss/1', 'P_cond_IGBT/1');
    add_line(subsystem_path, 'IGBT_Switching_Loss/1', 'P_sw_IGBT/1');
    
    % Set MATLAB Function code for IGBT Conduction Loss
    set_matlab_function_code([subsystem_path '/IGBT_Conduction_Loss'], ...
        'igbt_conduction_loss');
    
    % Set MATLAB Function code for IGBT Switching Loss
    set_matlab_function_code([subsystem_path '/IGBT_Switching_Loss'], ...
        'igbt_switching_loss');
    
    % Set MATLAB Function code for Diode Conduction Loss
    set_matlab_function_code([subsystem_path '/Diode_Conduction_Loss'], ...
        'diode_conduction_loss');
    
    % Set MATLAB Function code for Diode Switching Loss
    set_matlab_function_code([subsystem_path '/Diode_Switching_Loss'], ...
        'diode_switching_loss');
end

%% Build Thermal Model Subsystem
function build_thermal_model(subsystem_path)
    % Remove default blocks
    delete_block([subsystem_path '/In1']);
    delete_block([subsystem_path '/Out1']);
    
    % Input: Total Power Loss
    add_block('simulink/Sources/In1', [subsystem_path '/P_total'], ...
        'Position', pos(50, 100, 40, 30));
    
    % Cauer Network (Foster equivalent for simplicity)
    % R1-C1 network (junction to case)
    add_block('simulink/Math Operations/Gain', [subsystem_path '/Rth_jc'], ...
        'Gain', '0.48', 'Position', pos(150, 100, 50, 30));
    
    add_block('simulink/Continuous/Transfer Fcn', [subsystem_path '/Thermal_RC1'], ...
        'Numerator', '[1]', 'Denominator', '[0.024 1]', ...
        'Position', pos(250, 95, 80, 40));
    
    % Add ambient temperature
    add_block('simulink/Sources/Constant', [subsystem_path '/T_amb'], ...
        'Value', '40', 'Position', pos(250, 170, 50, 30));
    
    % Sum for junction temperature
    add_block('simulink/Math Operations/Add', [subsystem_path '/Tj_calc'], ...
        'Inputs', '++', 'Position', pos(400, 110, 40, 60));
    
    % Rate limiter for realistic thermal dynamics
    add_block('simulink/Discontinuities/Rate Limiter', [subsystem_path '/Rate_Limit'], ...
        'RisingSlewLimit', '50', 'FallingSlewLimit', '-50', ...
        'Position', pos(500, 115, 50, 40));
    
    % Output: Junction Temperature
    add_block('simulink/Sinks/Out1', [subsystem_path '/Tj'], ...
        'Position', pos(600, 125, 40, 30));
    
    % Connect blocks
    add_line(subsystem_path, 'P_total/1', 'Rth_jc/1');
    add_line(subsystem_path, 'Rth_jc/1', 'Thermal_RC1/1');
    add_line(subsystem_path, 'Thermal_RC1/1', 'Tj_calc/1');
    add_line(subsystem_path, 'T_amb/1', 'Tj_calc/2');
    add_line(subsystem_path, 'Tj_calc/1', 'Rate_Limit/1');
    add_line(subsystem_path, 'Rate_Limit/1', 'Tj/1');
end

%% Build Degradation Model Subsystem
function build_degradation_model(subsystem_path)
    % Remove default blocks
    delete_block([subsystem_path '/In1']);
    delete_block([subsystem_path '/Out1']);
    
    % Inputs
    add_block('simulink/Sources/In1', [subsystem_path '/Tj'], ...
        'Position', pos(50, 50, 40, 30));
    add_block('simulink/Sources/In1', [subsystem_path '/P_loss'], ...
        'Position', pos(50, 120, 40, 30));
    
    % Temperature Swing Detector (dTj calculator)
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
        [subsystem_path '/Temp_Swing_Detector'], ...
        'Position', pos(150, 50, 100, 60));
    
    % Bond Wire Degradation
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
        [subsystem_path '/Bond_Wire_Degradation'], ...
        'Position', pos(300, 50, 100, 60));
    
    % Solder Fatigue
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
        [subsystem_path '/Solder_Fatigue'], ...
        'Position', pos(300, 150, 100, 60));
    
    % Gate Oxide Degradation
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
        [subsystem_path '/Gate_Oxide_Degradation'], ...
        'Position', pos(300, 250, 100, 60));
    
    % Outputs
    add_block('simulink/Sinks/Out1', [subsystem_path '/R_CE_increase'], ...
        'Position', pos(450, 65, 40, 30));
    add_block('simulink/Sinks/Out1', [subsystem_path '/Rth_increase'], ...
        'Position', pos(450, 165, 40, 30));
    add_block('simulink/Sinks/Out1', [subsystem_path '/Vth_drift'], ...
        'Position', pos(450, 265, 40, 30));
    add_block('simulink/Sinks/Out1', [subsystem_path '/dTj'], ...
        'Position', pos(280, 65, 40, 30));
    
    % Connect blocks
    add_line(subsystem_path, 'Tj/1', 'Temp_Swing_Detector/1');
    add_line(subsystem_path, 'Temp_Swing_Detector/1', 'Bond_Wire_Degradation/1');
    add_line(subsystem_path, 'Temp_Swing_Detector/1', 'Solder_Fatigue/1');
    add_line(subsystem_path, 'Temp_Swing_Detector/1', 'Gate_Oxide_Degradation/1');
    add_line(subsystem_path, 'Bond_Wire_Degradation/1', 'R_CE_increase/1');
    add_line(subsystem_path, 'Solder_Fatigue/1', 'Rth_increase/1');
    add_line(subsystem_path, 'Gate_Oxide_Degradation/1', 'Vth_drift/1');
    add_line(subsystem_path, 'Temp_Swing_Detector/1', 'dTj/1');
    
    % Set MATLAB Function codes
    set_matlab_function_code([subsystem_path '/Temp_Swing_Detector'], ...
        'temp_swing_detector');
    set_matlab_function_code([subsystem_path '/Bond_Wire_Degradation'], ...
        'bond_wire_degradation');
    set_matlab_function_code([subsystem_path '/Solder_Fatigue'], ...
        'solder_fatigue');
    set_matlab_function_code([subsystem_path '/Gate_Oxide_Degradation'], ...
        'gate_oxide_degradation');
end

%% Build Reliability Calculator Subsystem
function build_reliability_calculator(subsystem_path)
    % Remove default blocks
    delete_block([subsystem_path '/In1']);
    delete_block([subsystem_path '/Out1']);
    
    % Inputs
    add_block('simulink/Sources/In1', [subsystem_path '/dTj'], ...
        'Position', pos(50, 80, 40, 30));
    add_block('simulink/Sources/In1', [subsystem_path '/Tj_mean'], ...
        'Position', pos(50, 150, 40, 30));
    
    % Power Cycling Model (Semikron AN 21-001)
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
        [subsystem_path '/Power_Cycling_Model'], ...
        'Position', pos(200, 100, 120, 80));
    
    % Accumulated Damage Calculator (Miner's rule)
    add_block('simulink/User-Defined Functions/MATLAB Function', ...
        [subsystem_path '/Damage_Accumulation'], ...
        'Position', pos(400, 100, 120, 80));
    
    % Outputs
    add_block('simulink/Sinks/Out1', [subsystem_path '/Cycles_to_Failure'], ...
        'Position', pos(360, 120, 40, 30));
    add_block('simulink/Sinks/Out1', [subsystem_path '/Remaining_Life'], ...
        'Position', pos(560, 120, 40, 30));
    add_block('simulink/Sinks/Out1', [subsystem_path '/Damage_Ratio'], ...
        'Position', pos(560, 160, 40, 30));
    
    % Connect blocks
    add_line(subsystem_path, 'dTj/1', 'Power_Cycling_Model/1');
    add_line(subsystem_path, 'Tj_mean/1', 'Power_Cycling_Model/2');
    add_line(subsystem_path, 'Power_Cycling_Model/1', 'Cycles_to_Failure/1');
    add_line(subsystem_path, 'Power_Cycling_Model/1', 'Damage_Accumulation/1');
    add_line(subsystem_path, 'Damage_Accumulation/1', 'Remaining_Life/1');
    add_line(subsystem_path, 'Damage_Accumulation/2', 'Damage_Ratio/1');
    
    % Set MATLAB Function codes
    set_matlab_function_code([subsystem_path '/Power_Cycling_Model'], ...
        'power_cycling_model');
    set_matlab_function_code([subsystem_path '/Damage_Accumulation'], ...
        'damage_accumulation');
end

%% Connect Main Subsystems
function connect_subsystems(model_name)
    % Connect Power Stage to Loss Calculation
    add_line(model_name, 'Power_Stage/1', 'Loss_Calculation/1');
    add_line(model_name, 'Power_Stage/2', 'Loss_Calculation/2');
    add_line(model_name, 'Power_Stage/3', 'Loss_Calculation/4');
    
    % Connect Loss Calculation to Thermal Model
    add_line(model_name, 'Loss_Calculation/1', 'Thermal_Model/1');
    
    % Connect Thermal Model back to Loss Calculation (feedback)
    add_line(model_name, 'Thermal_Model/1', 'Loss_Calculation/3', ...
        'autorouting', 'on');
    
    % Connect to Degradation Model
    add_line(model_name, 'Thermal_Model/1', 'Degradation_Model/1', ...
        'autorouting', 'on');
    add_line(model_name, 'Loss_Calculation/1', 'Degradation_Model/2', ...
        'autorouting', 'on');
    
    % Connect to Reliability Calculator
    add_line(model_name, 'Degradation_Model/4', 'Reliability_Calculator/1', ...
        'autorouting', 'on');
    add_line(model_name, 'Thermal_Model/1', 'Reliability_Calculator/2', ...
        'autorouting', 'on');
end

%% Add Monitoring and Scopes
function add_monitoring(model_name)
    % Add scopes for visualization
    add_block('simulink/Sinks/Scope', [model_name '/Scope_Losses'], ...
        'Position', pos(1200, 50, 60, 60));
    
    add_block('simulink/Sinks/Scope', [model_name '/Scope_Temperature'], ...
        'Position', pos(1200, 150, 60, 60));
    
    add_block('simulink/Sinks/Scope', [model_name '/Scope_Reliability'], ...
        'Position', pos(1200, 250, 60, 60));
    
    % Add To Workspace blocks for data logging
    add_block('simulink/Sinks/To Workspace', [model_name '/Log_Tj'], ...
        'VariableName', 'Tj_log', 'Position', pos(850, 50, 60, 40));
    
    add_block('simulink/Sinks/To Workspace', [model_name '/Log_Losses'], ...
        'VariableName', 'P_loss_log', 'Position', pos(850, 120, 60, 40));
    
    add_block('simulink/Sinks/To Workspace', [model_name '/Log_Lifetime'], ...
        'VariableName', 'Nf_log', 'Position', pos(850, 190, 60, 40));
    
    % Connect to logging blocks
    add_line(model_name, 'Thermal_Model/1', 'Log_Tj/1', 'autorouting', 'on');
    add_line(model_name, 'Loss_Calculation/1', 'Log_Losses/1', 'autorouting', 'on');
    add_line(model_name, 'Reliability_Calculator/1', 'Log_Lifetime/1', 'autorouting', 'on');
end

%% Configure Model Settings
function configure_model_settings(model_name)
    % Set solver
    set_param(model_name, 'Solver', 'ode45');
    set_param(model_name, 'StartTime', '0');
    set_param(model_name, 'StopTime', '3600'); % 1 hour simulation
    set_param(model_name, 'MaxStep', '1e-3');
    set_param(model_name, 'RelTol', '1e-4');
    
    % Enable signal logging
    set_param(model_name, 'SignalLogging', 'on');
    set_param(model_name, 'SignalLoggingName', 'logsout');
end

%% Helper function to set MATLAB Function code
function set_matlab_function_code(block_path, function_type)
    % This function sets the code for MATLAB Function blocks
    % In practice, you need to manually edit these or use Simulink.BlockDiagram API
    
    switch function_type
        case 'igbt_conduction_loss'
            code = sprintf(['function P_cond = igbt_conduction_loss(I, Tj)\n' ...
                '    V_CE0 = 0.95;\n' ...
                '    r_CE = 0.028;\n' ...
                '    temp_factor = 1 + 0.005*(Tj - 25);\n' ...
                '    V_CE0_temp = V_CE0 * (1 + 0.001*(Tj - 25));\n' ...
                '    r_CE_temp = r_CE * temp_factor;\n' ...
                '    P_cond = (V_CE0_temp + r_CE_temp * abs(I)) * abs(I) * 0.5;\n' ...
                'end']);
            
        case 'igbt_switching_loss'
            code = sprintf(['function P_sw = igbt_switching_loss(V_dc, I, Tj, f_sw)\n' ...
                '    E_on_ref = 2.4e-3;\n' ...
                '    E_off_ref = 1.5e-3;\n' ...
                '    V_ref = 600;\n' ...
                '    I_ref = 40;\n' ...
                '    Tj_ref = 25;\n' ...
                '    V_factor = V_dc / V_ref;\n' ...
                '    I_factor = abs(I) / I_ref;\n' ...
                '    Tj_factor = 1 + 0.003*(Tj - Tj_ref);\n' ...
                '    E_on = E_on_ref * V_factor * I_factor^1.3 * Tj_factor;\n' ...
                '    E_off = E_off_ref * V_factor * I_factor^0.6 * Tj_factor;\n' ...
                '    P_sw = (E_on + E_off) * f_sw;\n' ...
                'end']);
            
        case 'diode_conduction_loss'
            code = sprintf(['function P_cond_d = diode_conduction_loss(I, Tj)\n' ...
                '    V_F0 = 1.0;\n' ...
                '    r_F = 0.02;\n' ...
                '    P_cond_d = (V_F0 + r_F * abs(I)) * abs(I) * 0.5;\n' ...
                'end']);
            
        case 'diode_switching_loss'
            code = sprintf(['function P_sw_d = diode_switching_loss(V_dc, I, Tj, f_sw)\n' ...
                '    E_rec_ref = 0.8e-3;\n' ...
                '    V_ref = 600;\n' ...
                '    I_ref = 40;\n' ...
                '    V_factor = V_dc / V_ref;\n' ...
                '    I_factor = abs(I) / I_ref;\n' ...
                '    E_rec = E_rec_ref * V_factor * I_factor^0.6;\n' ...
                '    P_sw_d = E_rec * f_sw;\n' ...
                'end']);
            
        case 'temp_swing_detector'
            code = sprintf(['function dTj = temp_swing_detector(Tj)\n' ...
                '    persistent Tj_max Tj_min window_size counter Tj_buffer\n' ...
                '    if isempty(Tj_max)\n' ...
                '        Tj_max = Tj;\n' ...
                '        Tj_min = Tj;\n' ...
                '        window_size = 1000;\n' ...
                '        counter = 0;\n' ...
                '        Tj_buffer = zeros(window_size, 1);\n' ...
                '    end\n' ...
                '    counter = counter + 1;\n' ...
                '    idx = mod(counter-1, window_size) + 1;\n' ...
                '    Tj_buffer(idx) = Tj;\n' ...
                '    if counter >= window_size\n' ...
                '        Tj_max = max(Tj_buffer);\n' ...
                '        Tj_min = min(Tj_buffer);\n' ...
                '    else\n' ...
                '        Tj_max = max(Tj, Tj_max);\n' ...
                '        Tj_min = min(Tj, Tj_min);\n' ...
                '    end\n' ...
                '    dTj = Tj_max - Tj_min;\n' ...
                'end']);
            
        case 'bond_wire_degradation'
            code = sprintf(['function R_increase = bond_wire_degradation(dTj)\n' ...
                '    persistent R_add cycles\n' ...
                '    if isempty(R_add)\n' ...
                '        R_add = 0;\n' ...
                '        cycles = 0;\n' ...
                '    end\n' ...
                '    if dTj > 30\n' ...
                '        cycles = cycles + 1;\n' ...
                '        R_add = R_add + 0.001 * (dTj/50)^2;\n' ...
                '    end\n' ...
                '    R_increase = R_add;\n' ...
                'end']);
            
        case 'solder_fatigue'
            code = sprintf(['function Rth_increase = solder_fatigue(dTj)\n' ...
                '    persistent Rth_add cycles\n' ...
                '    if isempty(Rth_add)\n' ...
                '        Rth_add = 0;\n' ...
                '        cycles = 0;\n' ...
                '    end\n' ...
                '    if dTj > 20\n' ...
                '        cycles = cycles + 1;\n' ...
                '        Rth_add = Rth_add + 0.0005 * (dTj/40)^1.5;\n' ...
                '    end\n' ...
                '    Rth_increase = Rth_add;\n' ...
                'end']);
            
        case 'gate_oxide_degradation'
            code = sprintf(['function Vth_drift = gate_oxide_degradation(dTj)\n' ...
                '    persistent Vth_change stress_time\n' ...
                '    if isempty(Vth_change)\n' ...
                '        Vth_change = 0;\n' ...
                '        stress_time = 0;\n' ...
                '    end\n' ...
                '    stress_time = stress_time + 1;\n' ...
                '    Vth_drift = 0.0001 * sqrt(stress_time/1000);\n' ...
                'end']);
            
        case 'power_cycling_model'
            code = sprintf(['function Nf = power_cycling_model(dTj, Tj_mean)\n' ...
                '    A = 9.34e14;\n' ...
                '    B = -4.416;\n' ...
                '    Ea = 0.129;\n' ...
                '    kB = 8.617e-5;\n' ...
                '    Tj_mean_K = Tj_mean + 273.15;\n' ...
                '    if dTj < 1\n' ...
                '        dTj = 1;\n' ...
                '    end\n' ...
                '    Nf = A * (dTj^B) * exp(Ea / (kB * Tj_mean_K));\n' ...
                '    if Nf < 0 || isnan(Nf) || isinf(Nf)\n' ...
                '        Nf = 1e10;\n' ...
                '    end\n' ...
                'end']);
            
        case 'damage_accumulation'
            code = sprintf(['function [remaining_life, damage_ratio] = damage_accumulation(Nf)\n' ...
                '    persistent accumulated_cycles\n' ...
                '    if isempty(accumulated_cycles)\n' ...
                '        accumulated_cycles = 0;\n' ...
                '    end\n' ...
                '    accumulated_cycles = accumulated_cycles + 1;\n' ...
                '    damage_ratio = accumulated_cycles / Nf;\n' ...
                '    remaining_life = Nf - accumulated_cycles;\n' ...
                '    if remaining_life < 0\n' ...
                '        remaining_life = 0;\n' ...
                '    end\n' ...
                'end']);
            
        otherwise
            code = 'function y = fcn(u)\n    y = u;\nend';
    end
    
    % Note: In newer MATLAB versions, you can programmatically set function code
    % For older versions, this needs to be done manually in the Simulink editor
    fprintf('MATLAB Function block created: %s\n', block_path);
    fprintf('Please manually add the following code to the block:\n');
    fprintf('%s\n\n', code);
end

%% Helper function for position
function p = pos(x, y, w, h)
    p = [x, y, x+w, y+h];
end